This is to build yocto sdcard image for following SBC's:
rpi4b  ( Raspberry Pi 4B )
radxa  ( Rock Pi 4B plus )
rk3328 ( Renegade ROC-RK3328-CC )
tinker ( ASUS TinkerBoard )

Steps to build yocto sdcard image:

1. git clone https://github.com/chenphilip888/build-yocto-4SBCs.git
 
2. Install cross compiler:
   wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
   sudo tar xvf gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz  -C /usr/local/
   wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
   sudo tar xvf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz -C /usr/local/

3. cd ~/build-yocto-4SBCs/rpi4b
   git clone git://git.yoctoproject.org/poky -b dunfell
   cd poky
   git clone git://git.yoctoproject.org/meta-raspberrypi.git -b dunfell
   git clone https://git.openembedded.org/meta-openembedded -b dunfell
   source oe-init-build-env
   cd ../../
   make apply_patches

   cd poky; source oe-init-build-env;
   bitbake -s
   bitbake -c cleansstate core-image-x11
   bitbake -k core-image-x11

   The result image is in tmp/deploy/images/raspberrypi4-64/core-image-x11-raspberrypi4-64.wic.bz2
   bzip2 -d -f tmp/deploy/images/raspberrypi4-64/core-image-x11-raspberrypi4-64.wic.bz2
   sudo dd if=~/build-yocto-4SBCs/rpi4b/poky/build/tmp/deploy/images/raspberrypi4-64/core-image-x11-raspberrypi4-64.wic of=/dev/mmcblk0 bs=4096 conv=notrunc,fsync
   sudo e2fsck -p -f /dev/mmcblk0p2
   sudo resize2fs /dev/mmcblk0p2
   sudo e2label /dev/mmcblk0p2 rootfs
   sync
   eject sdcard; plugin sdcard again
   sudo vi /media/$USER/boot/config.txt ( delete dtparam=i2c1=on, add
   dtparam=audio=on
   dtparam=i2c_arm=on
   dtparam=spi=on
   enable_uart=1
   dtoverlay=vc4-fkms-v3d
   max_framebuffers=2
   dtoverlay=pwm-2chan,pin=12,func=4,pin2=13,func2=4
   dtoverlay=uart2 )
   sudo vi /media/$USER/rootfs/etc/network/interfaces ( delete everything after iface lo inet loopback )

   \rm -rf ~/build-yocto-4SBCs/rpi4b/poky/build/tmp/work

4. cd ~/build-yocto-4SBCs/radxa
   git clone git://git.yoctoproject.org/poky -b thud
   cd poky
   git clone git://git.openembedded.org/meta-openembedded.git -b thud
   git clone https://github.com/nishantpoorswani/meta-radxa.git -b thud
   source oe-init-build-env
   cd ../../
   make apply_patches

   cd poky; source oe-init-build-env;
   bitbake -s
   bitbake -c cleansstate radxa-console-image
   bitbake -k radxa-console-image

   The result is in ~/build-yocto-4SBCs/radxa/poky/build/tmp/deploy/images/rockpi-4b-rk3399/radxa-console-image-rockpi-4b-rk3399-gpt.img

   sudo dd if=~/build-yocto-4SBCs/radxa/poky/build/tmp/deploy/images/rockpi-4b-rk3399/radxa-console-image-rockpi-4b-rk3399-gpt.img of=/dev/mmcblk0 bs=4096 conv=notrunc,fsync
   sudo e2fsck -p -f /dev/mmcblk0p5
   sudo resize2fs /dev/mmcblk0p5
   sudo e2label /dev/mmcblk0p5 rootfs
   sync
   eject sdcard; plugin sdcard again
   sudo vi /media/$USER/rootfs/etc/network/interfaces ( delete everything after iface lo inet loopback )

   \rm -rf ~/build-yocto-4SBCs/radxa/poky/build/tmp/work

5. cd ~/build-yocto-4SBCs/rk3328
   git clone https://github.com/radxa/kernel.git -b release-4.4-rockpi4
   mv kernel kernel.git
   \rm -rf kernel.git/.git
   git clone git://git.yoctoproject.org/poky -b thud
   cd poky
   git clone git://git.openembedded.org/meta-openembedded.git -b thud
   git clone https://github.com/nishantpoorswani/meta-radxa.git -b thud
   source oe-init-build-env
   cd ../../
   make get_kernel
   vi ./patches/linux-rockchip_4.4.bb ( change SRC_URI kernel path to your path )
   make apply_patches

   cd poky; source oe-init-build-env;
   bitbake -s
   bitbake -c cleansstate radxa-console-image
   bitbake -k radxa-console-image

   The result is in ~/build-yocto-4SBCs/rk3328/poky/build/tmp/deploy/images/evb-rk3328/radxa-console-image-evb-rk3328-gpt.img

   sudo dd if=~/build-yocto-4SBCs/rk3328/poky/build/tmp/deploy/images/evb-rk3328/radxa-console-image-evb-rk3328-gpt.img of=/dev/mmcblk0 bs=4096 conv=notrunc,fsync
   sudo e2fsck -p -f /dev/mmcblk0p5
   sudo resize2fs /dev/mmcblk0p5
   sudo e2label /dev/mmcblk0p5 rootfs
   sync
   eject sdcard; plugin sdcard again
   sudo vi /media/$USER/rootfs/etc/network/interfaces ( delete everything after iface lo inet loopback )

   \rm -rf ~/build-yocto-4SBCs/rk3328/poky/build/tmp/work

6. cd ~/build-yocto-4SBCs/tinker
   Skip yocto u-boot, because mainline u-boot spl is bigger than 32 KB, and debian_u-boot has compilation problem in yocto. So compile debian_u-boot separately.
   git clone https://github.com/TinkerBoard/debian_u-boot.git -b release
   make u-boot

   git clone https://github.com/TinkerBoard/debian_kernel.git -b release
   mv debian_kernel debian_kernel.git
   \rm -rf debian_kernel.git/.git
   git clone git://git.yoctoproject.org/poky -b thud
   cd poky
   git clone git://git.openembedded.org/meta-openembedded.git -b thud
   git clone https://github.com/meta-qt5/meta-qt5.git -b thud
   git clone https://gitlab.com/tinkerboard-yocto/meta-rockchip
   git clone https://gitlab.com/tinkerboard-yocto/meta-rockchip-extra
   source oe-init-build-env
   cd ../../
   make get_kernel
   vi ./patches/linux-rockchip_4.4.bb ( change SRC_URI kernel path to your path )
   make apply_patches

   cd poky; source oe-init-build-env;
   bitbake -s
   bitbake -c cleansstate core-image-x11
   bitbake -k core-image-x11

   The result is in ~/build-yocto-4SBCs/tinker/poky/build/tmp/deploy/images/tinker-rk3288/core-image-x11-tinker-rk3288-gpt.img

   sudo dd if=~/build-yocto-4SBCs/tinker/poky/build/tmp/deploy/images/tinker-rk3288/core-image-x11-tinker-rk3288-gpt.img of=/dev/mmcblk0 bs=4096 conv=notrunc,fsync
   sudo e2fsck -p -f /dev/mmcblk0p2
   sudo resize2fs /dev/mmcblk0p2
   sudo e2label /dev/mmcblk0p2 rootfs
   sync
   eject sdcard; plugin sdcard again
   sudo vi /media/$USER/rootfs/etc/network/interfaces ( delete everything after iface lo inet loopback )

   \rm -rf ~/build-yocto-4SBCs/tinker/poky/build/tmp/work

plugin sdcard to SBC
login:
username: root
password: none   ( for radxa and rk3328 password is rock )

setup wifi:
Note: rk3328 need to plugin usb wifi dongle.

nmcli dev wifi connect "SSID" password "PASSWORD"

\rm /etc/localtime
ln -s /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
date

glmark2-es2-drm ( rpi4b run glmark2-es2 )

aplay -l

------------------------------------------------------------------

gpio tests:

Parts required:
1. Seeed Grove starter kit LED, button, buzzer, Grove-LCD RGB Backlight V3.0 JHD1313M2.
2. Analog Servo.
3. Adafruit SSD1306 128x32 SPI OLED Display.

The following 8 tests are included: ( see below for tests summary )
1. uart test
2. led test
3. button test
4. pwm led test
5. i2c lcd test
6. tongsong
7. servo
8. spi oled test

check kernel driver readiness for rpi4b:
sudo cat /proc/device-tree/soc/serial@7e201400/status  ( uart 2 )
sudo cat /proc/device-tree/soc/pwm@7e20c000/status  ( pwm 1 )
sudo cat /proc/device-tree/soc/i2c@7e804000/status  ( i2c-1 )
sudo cat /proc/device-tree/soc/spi@7e204000/status  ( spi-0 )

check kernel driver readiness for radxa:
sudo cat /proc/device-tree/serial@ff370000/status ( uart 4 )
sudo cat /proc/device-tree/pwm@ff420010/status  ( pwm 1 )
sudo cat /proc/device-tree/i2c@ff160000/status  ( i2c-7 )
sudo cat /proc/device-tree/spi@ff1e0000/status  ( spi-2 )

check kernel driver readiness for rk3328:
sudo cat /proc/device-tree/serial@ff120000/status ( uart 1 )
sudo cat /proc/device-tree/pwm@ff1b0020/status  ( pwm 2 )
sudo cat /proc/device-tree/i2c@ff160000/status  ( i2c-1 )
sudo cat /proc/device-tree/spi@ff190000/status  ( spi-0 )

check kernel driver readiness for tinker:
sudo cat /proc/device-tree/serial@ff1c0000/status ( uart 4 )
sudo cat /proc/device-tree/pwm@ff680030/status  ( pwm 3 )
sudo cat /proc/device-tree/i2c@ff140000/status  ( i2c-1 )
sudo cat /proc/device-tree/spi@ff130000/status  ( spi-2 )

gpio-test

-----------------------------------------------------------------------------

Here are the summary of the tests:

These tests used Seeed Grove starter kit LED, button, buzzer, Grove-LCD RGB Backlight V3.0 JHD1313M2, Analog Servo and Adafruit SSD1306 128x32 SPI OLED Display.

1. uart test.
   This test will send uart tx to uart rx for loopback.
   It sends 0 to 255 to uart tx and receives 0 to 255 from uart rx.
   Connect gpio pin 27 to pin 28. ( rpi4b uart 2 ).
   Connect gpio pin 19 to pin 21. ( radxa uart 4 ).
   Connect gpio pin  8 to pin 10. ( rk3328 uart 1 ).
   Connect gpio pin 13 to pin 15. ( tinker uart 4 ).

2. led test.
   This test will blink led 5 times.
   Connect gpio pin 18 to led control. ( rpi4b ).
   Connect gpio pin 16 to led control. ( radxa ).
   Connect gpio pin 18 to led control. ( rk3328 ).
   Connect gpio pin 16 to led control. ( tinker ).
   Connect gpio pin  2 to led 5V.
   Connect gpio pin  9 to led ground.

3. button test.
   Push button 10 times. The led will on/off 10 times.
   Connect gpio pin 18 to led control. ( rpi4b ).
   Connect gpio pin 16 to led control. ( radxa ).
   Connect gpio pin 18 to led control. ( rk3328 ).
   Connect gpio pin 16 to led control. ( tinker ).
   Connect gpio pin  2 to led 5V.
   Connect gpio pin  9 to led ground.
   Connect gpio pin 16 to button control. ( rpi4b ).
   Connect gpio pin 18 to button control. ( radxa ).
   Connect gpio pin 16 to button control. ( rk3328 ).
   Connect gpio pin 18 to button control. ( tinker ).
   Connect gpio pin  4 to button 5V.
   Connect gpio pin  6 to button ground.

4. pwm led test.
   This test will dim led 10 times.
   Connect gpio pin 33 to led control. ( rpi4b pwm 1 ).
   Connect gpio pin 13 to led control. ( radxa pwm 1 ).
   Connect gpio pin 12 to led control. ( rk3328 pwm 2 ).
   Connect gpio pin 32 to led control. ( tinker pwm 3 ).
   Connect gpio pin  2 to led 5V.
   Connect gpio pin  9 to led ground.

5. i2c lcd test.
   This test will change lcd backlight color for 5 cycles.
   Then it will display two sentences on lcd display.
   Connect gpio pin  3 to lcd display SDA. ( rpi4b i2c-1 ).
   Connect gpio pin  5 to lcd display SCL.
   Connect gpio pin  3 to lcd display SDA. ( radxa i2c-7 ).
   Connect gpio pin  5 to lcd display SCL.
   Connect gpio pin 27 to lcd display SDA. ( rk3328 i2c-1 ).
   Connect gpio pin 28 to lcd display SCL.
   Connect gpio pin  3 to lcd display SDA. ( tinker i2c-1 ).
   Connect gpio pin  5 to lcd display SCL.
   Connect gpio pin  2 to lcd display 5V.
   Connect gpio pin  9 to lcd display ground.

6. tongsong.
   This test will generate song using buzzer.
   Connect gpio pin 33 to buzzer control. ( same as 4. pwm led test )
   Connect gpio pin  2 to buzzer 5V.
   Connect gpio pin  9 to buzzer ground.

7. servo.
   This test will turn servo 45 degree - 90 degree - 45 degree - 0 degree etc.
   Connect gpio pin 33 to servo control. ( same as 4. pwm led test )
   Connect gpio pin  2 to servo 5V.
   Connect gpio pin  9 to servo ground.

8. spi oled test.
   This test will show some ascii characters on the oled display.
   Connect gpio pin 18 to oled display DC.  ( rpi4b spi-0 )
   Connect gpio pin 24 to oled display CS.
   Connect gpio pin 19 to oled display TX.
   Connect gpio pin 23 to oled display CLK.
   Connect gpio pin 16 to oled display DC.  ( radxa spi-2 )
   Connect gpio pin 33 to oled display CS.
   Connect gpio pin 29 to oled display TX.
   Connect gpio pin  7 to oled display CLK.
   Connect gpio pin 18 to oled display DC.  ( rk3328 spi-0 )
   Connect gpio pin 24 to oled display CS.
   Connect gpio pin 19 to oled display TX.
   Connect gpio pin 23 to oled display CLK.
   Connect gpio pin 16 to oled display DC.  ( tinker spi-2 )
   Connect gpio pin 24 to oled display CS.
   Connect gpio pin 19 to oled display TX.
   Connect gpio pin 23 to oled display CLK.
   Connect gpio pin  1 to oled display 3.3V.
   Connect gpio pin  9 to oled display ground.

-----------------------------------------------------------------------------
